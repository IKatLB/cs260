1.) (20%) Create a design before you start coding that describes or shows how a graph structure could be used to store some kinds of data and attempt to solve 
some kind of problem (yes, this can be a game that needs a graph to represent a map!),

2.) (20%) Create some tests (at least two for each piece of functionality) before you start coding...

(40%) Implement a graph class with at least (this category effectively combines implementation and specification, partly to emphasize getting the algorithms working!):

3.)    (5%) a function to add a new vertex to the graph (perhaps add_vertex(vertex_name)),

4.)    (5%) a function to add a new edge between two vertices of the graph (perhaps add_edge(source, destination) or source.add_edge(destination)),

5.)    (15%) a function for a shortest path algorithm (perhaps shortest_path(source, destination)),

6.)    (15%) a function for a minimum spanning tree algorithm (example min_span_tree()).

7.) (10%) Analyze the complexity of all of your graph behaviors (effectively a part of our documentation for grading purposes),

8.) (10%) Once you have implemented and tested your code, add to the README file what line(s) of code or inputs and outputs show your work meeting each of the 
above requirements (or better, include a small screen snip of where it meets the requirement!).

1.) this document


3 - 6.)

define edges and nodes in seperate header files since they will rely on each other in their definitions


struct edge

int weight
node* source 
node* end 




struct node

int name
vector<edge *> neighbors 



struct graph

vector<edge *> edges
vector<node *> nodes


find node, (vector<node*> vec, int NameToFind), returns int index //outside function since we want to call this on unvisited nodes in shortest path algorithm
{
    int index = -1
for(node *i = vec.nodes.begin(); i != vec.nodes.end(); ++i){
    if(i->name == NameToFind){
        index = distance(vec.nodes.begin(), i)
        return index
    }
}
return index
}
3.)
void graph method add node, (int name)
cases:
node is in graph, return
else add node

if(find node(name) == -1){
    return
}
else{
node NewNode;
NewNode.name = name;
this.nodes.push_back(NewNode)
}




4.)

graph method add edge (int name1, name 2, int weight) //weight in back so default can be 1
cases:
nodes are already connected, just return
either node does not exist in graph, add them
nodes exist and are not already connected, adds edge with source of name1 and end of name2, then update either nodes neighbor vector to include this edge

int name1_index = find node(name1)
int name2_index = find node(name2)

if(name1_index == -1){ //nodes dont exist
this.addnode.(name 1)
name1_index = findnode(name1)
}
if(name2_index == -1){
this.addnode.(name 2)
name2_index = findnode(name2)
}

for(edge *i = this.edges.begin(); i != this.edges.end(); ++i){ //already in graph
    if(i->source == (name1 or name2) and i->end == (name1 or name2)){ //accounts for both cases of source and end, unsure if we are allowing edges between the same point but allows for that as well
        return
    }
}

edge NewEdge;
NewEdge.weight = weight
NewEdge.source = this.nodes[name1_index]
NewEdge.end = this.nodes[name2_index]
this.nodes[name1_index].neighbors.push_back(NewEdge)
this.nodes[name2_index].neighbors.push_back(NewEdge)
this.edges.push_back(NewEdge)





5.) Dijkstra's algorithm

consider equal weight case

list of unvisited nodes
each node associated with distance value
previous node value for each node
source node distance value = 0
if no unvisited neighbors skip 
find weight of neighbor edges and if neighbor nodes current distance is greater than current node weight  then neighbor node distance = current weight + edge weight 
if swaped, make previous node of neighbor node = current node
remove current node from visited nodes
select node with smallest distance in unvisited nodes as new current node
repeat until no nodes remain in unvisited nodes, at which point see destinations previous node and retrace steps to source node.

int FindSmallestVal(vector<int> input){
    int index = 0;
    int val = 0;
    for(int* i = input.begin(); i != input.end(); ++i){
        if(*i != -1 and *i < val){
            val = *i;
            index = i - input.begin();
        }
    }
return index;

}

returns list of edges
shortest path (int source_index, int end_index)
source = this.nodes[source_index]
vector<node*> unvisited = this.nodes
vector<int> distance;
vector<node*> PrevNode;

for(node* i = unvisited.begin(); i != unvisited.end(); ++i){ //intialize sets
    int index = i - unvisited.begin()
    if(*i == source){
        distance[index] = 0
    }
    else{
        distance[index] = -1 //akin to infinity
    }
    PrevNode[index] = -1 //akin to no previous node
}


bool repeat = true;
while(repeat){
CurrentNodeIndex = FindSmallestVal(distance);
CurrentNode = unvistied[CurrentNodeIndex];
vector<edge*> neighbors = CurrentNode.neighbors
for(edge* i = neighbors.begin(); i != neighbors.end(), ++i){
if(i->*source == CurrentNode){ //needs to be dereferanced cause memory location of current node is in unvisited, source is in this.nodes
CurrentNeighbor = i->*end
}
else{
    CurrentNeighborName = i->source->name
}
CurrentNeighborIndex = findnode(unvisited, CurrentNeighborName)
NewDistance = distance[CurrentNodeIndex] + i->weight;
if(distace[CurrentNeighborIndex] == -1 or NewDistance < distace[CurrentNeighborIndex]){
    distace[CurrentNeighborIndex] = NewDistance
    PrevNode[CurrentNeighborIndex] = CurrentNode->name
}
unvisited.erase(CurrentNodeIndex)


}

if(unvisited.empty()){repeat = false;}
}





6.) Kruskal's algorithm

will return set of edges
exit condition for non connected tree -> not needed since algorythm will work anyways
sort edges by weight
start at lowest weight
check if edge will create a cycle{
    visit each node and add to visited list by traversing tree
    if visit node twice dont add edge,
    repeat until no more unvisited then add edge
}


graph method min_span_tree(){

vector<int> weights;
for(edge *i = this.edges.begin(); i != this.edges.end(); ++i){
    
}




}

































