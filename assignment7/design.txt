Create a hashtable that resolves collisions by simply overwriting the old value with the new value, including at least:

    Describe the way that you decide on hashing a value
    (this can be simple or complex based on how interesting you find the topic)

    An insert function that places the value at the appropriate location based on its hash value

    A contains function that returns whether the value is already in the hashtable

    (optional) A delete function that removes a value based on its hash and then returns that valueâ€¦

Then create a smarter hashtable (double hashing or chaining) including at least the same functions as the simple hashtable

Compare some information relating to collisions (frequency) and their effect on complexity (of insert and contains methods)




simple hash table struct stores strings in string array

int size
string pointer to string array

hash method whih takes string input and turns it into an index
for c : sting, index += c

resize method, takes int input
make new string array of size input
copy old storage into new array


add method string value
find index with hash
check for size, if index > size, call resize(index)
else
storage[index] = value, overwrites collisions

contains method, string input
output = false
for int i = 0; i < size; 




